var epub = require('quick-epub');
var path = require('path');

// Quark
    function guid() {
            function s4() {
              return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
            }
          return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
            s4() + '-' + s4() + s4() + s4();
    }
   function base64_encode(file) {
    // read binary data
    var bitmap = fs.readFileSync(file);
    // convert binary data to base64 encoded string
    return new Buffer(bitmap).toString('base64');
}
function base64_decode(base64str, file) {
    // create buffer object from base64 encoded string, it is important to tell the constructor that the string is base64 encoded
    var bitmap = new Buffer(base64str, 'base64');
    // write buffer to file
    fs.writeFileSync(file, bitmap);
    console.log('******** File created from base64 encoded string ********');
}


function findindex(arraytosearch, key, valuetosearch) {

    for (var i = 0; i < arraytosearch.length; i++) {

    if (arraytosearch[i][key] == valuetosearch) {
    return i;
    }
    }
    return null;
    }
function search_id(nameKey, myArray){
    for (var i=0; i < myArray.length; i++) {
        if (myArray[i]._id === nameKey) {
            return myArray[i];
        }
    }
}

    (function () {
    'use strict';

    var napp = "Redact";

   var app =  angular.module(napp, [
        'ngMaterial',
        'ngMessages',  
        'ngMdIcons',
        'ngAnimate',
        'pouchdb',
        'angular-medium-editor',
        'ui-notification',
        'fieldedit',
        'fieldedits',
        'angular-perfect-scrollbar-2',
        'stBlurredDialog'
    ]);

   
    app.config(function(NotificationProvider, $mdThemingProvider) {
        $mdThemingProvider.theme('default')
     .dark();
        NotificationProvider.setOptions({
            delay: 5000,
            startTop: 2,
            startRight: 0,
            verticalSpacing: 0,
            horizontalSpacing: 0,
            positionX: 'left',
            positionY: 'bottom'
        });
        });

    app.controller('AppCtrl', AppCtrl).config(function($mdIconProvider) {
    $mdIconProvider
       .iconSet('textile', '../img/logo.svg', 24);
   });
    app.controller('BlurCtrl', BlurCtrl);
    app.controller('MathController', MathController);
    app.controller('ConfigureTextile', ConfigureTextile);
    app.config(function($logProvider){
    $logProvider.debugEnabled(true);
  })

    app.factory('Proyectos', function($rootScope, $q, pouchDB) {
        var dbc = pouchDB('idb://chapters');
        var db = pouchDB('idb://projects');
        var dbs = pouchDB('idb://settings');
        var works = [];
        var chapters = [];
        var settings = '';
        var state = {project: 'default'};PouchDB.debug.disable();
        return {
          getDataTextile: function(){
            return dbs.find({
                  selector: {_id: {$eq: 'TextileSettings'}}
                });
          },
          setDataTextile: function(here){
            dbs.find({
                  selector: {_id: {$eq: 'TextileSettings'}}
                }).then(function (result) {
                  return {author: result[0].author, email: result[0].email, path: result[0].path};
            }).catch(function(err){
              dbc.put(here);
            });
          },
          updateSetting: function(which, data){
            dbs.upsert("TextileSettings", function (doc) {
                    if(which == 'path'){
                      console.log(data)
                        doc.path = data;
                    } if(which == 'author'){
                        doc.author = data;

                    } if(which == 'email'){
                        doc.email = data;
                    } 
                  return doc;
                }).then(function(docs){ $rootScope.$emit('update.settings'); }).catch(function (err) {
                   return 0;
                });
          },
          updateWork: function(row, data){
            var toset = data._id;
            db.upsert(toset, function (doc) {
                    if(row == 'title'){
                        doc.title = data.title;
                        works[data] = data;
                    } if(row == 'descripcion'){
                        doc.descripcion = data.descripcion;
                        works[data] = data;
                    } 
                  return doc;
                }).catch(function (err) {
                   return 0;
                });
          },
          newWork: function(titulo) {
                var ___id = guid();
            var project = {
            _id: ___id,
            title: titulo,
            descripcion: '',
            done: false,
            imgcover: '',
            iswork: 'true',
            type: 'word',
            theme: 'default',
            };
            works.push(project);
            db.put(project);
          },
          showp: function(){
            return works;
          },
          shows: function(){
            return settings;
          },
          showWork: function(){
            return chapters;
          },
         
          Writing: function(){
            return state.project;
          },
          setCurr: function(data){
            state.project = data;
            
            return state.project;
          },
          delWork: function(tab){
            var resultObject = search_id(tab._id, works);
            var index = works.indexOf(resultObject);
            if(index != -1){
                 works.splice(index, 1);
            db.get(tab._id, function(err, doc) {
            if (err) {
                console.log(err);
            }
            else {
                db.remove(doc, function(err, response) {
                    return '1';
                });
            }
             });
              }
          },
          delChapter: function(tab){
            var resultTab = search_id(tab._id, chapters);
            var index = chapters.indexOf(resultTab);
            console.log(tab);
            console.log(index);
            console.log(tab);
            console.log(chapters);
            if(index != -1){
            chapters.splice(index, 1);
            console.log("going!");
            dbc.get(tab._id, function(err, doc) {
            if (err) {
                console.log(err);
            }
            else {
                dbc.remove(doc, function(err, response) {
                    console.log("trabajoborrado");
                    $rootScope.$emit('update.splice', index);
                });
            }
             });
             }
          },
          loadWork: function(project){
            state.project = project;
                return dbc.find({
                  selector: {_id: {$gte: null}, project: {$eq: state.project}},     
                  sort: ['_id']
                });
          },
          findPad: function(project, scope){
            state.project = project;
            chapters.length = 0;
               dbc.find({
                  selector: {_id: {$gte: null}, project: {$eq: project}},     
                  sort: ['_id']
                }).then(function (result) {
                    for (var i = 0; i < result.docs.length; i++) {
                     var docx = {_id: result.docs[i]._id, title: result.docs[i].title, content: result.docs[i].content, disabled: false, done: false, project: result.docs[i].project};
                    chapters.push(docx);
                     
                    } 
                }).then(function(res){ 
                 $rootScope.$emit('update.tabs', chapters);
            }).catch(function(error){ Notification('OcurriÃ³ un error desconocido'); });
          },
          findWork: function() {
            
            db.find({
                  selector: {_id: {$gte: null}, type: {$eq: 'word'}},     
                  sort: ['_id']
                }).then(function (result) {
                    for (var i = 0; i < result.docs.length; i++) {
                     var docx = {_id: result.docs[i]._id, title: result.docs[i].title, descripcion: result.docs[i].descripcion, done: result.docs[i].done, imgcover: result.docs[i].imgcover, iswork: result.docs[i].iswork, type: result.docs[i].type, theme: result.docs[i].theme, expand: false};
                    works.push(docx);
                    }   }).catch(function(error){  });
          },
        /*  storeimage: function(id, base64) {
            db.get(id).then(function(doc) {
            var buf = new Buffer(base64, 'base64'); 
            console.log(doc)
             db.putAttachment(doc._id, 'tapacover.png', doc._rev, base64, 'text/plain').then(function(res) {
                  console.log(res);
              }).catch(function(err){ return console.log(err); });
           }).catch(function(err){ return console.log(err); });
          }, 
          getfile: function(id, file){
            db.get(id, {attachments: true}).then(function(doc) {
              return doc;
          }).then(function(here) {
            console.log("EA!");
            console.log(db.getAttachment(here.id, file));
          }).catch(function(err){
            console.log("error :(");
            console.log(err);
          });
          }, */
          saveWork: function(data){
            var htmlcontent = $("div#"+data).html();
            dbc.upsert(data, function (doc) {
                  doc.content = htmlcontent;
                  return doc;
                }).then(function (res) {
                  // success, res is {rev: '1-xxx', updated: true}
                  console.log("worked!")
                }).catch(function (err) {
                  // error
                });
          },
          addChapter: function(chapter){
            console.log(state.project);
             if(state){
                    var projectin = state.project;
                
                } else {
                    var projectin = "default";
                }
                console.log(projectin)
            console.log("it work")
            console.log(chapter);
            chapters.push(chapter);
            dbc.put(chapter);
            return chapter.then;
          },
          get_project_rows: function(project){
              return dbc.find({
                  selector: {_id: {$gte: null}, project: {$eq: project}},
                  sort: ['_id']
                })
          },
          get_chapter_row: function(tab){
              return dbc.find({
                  selector: {_id: {$eq: tab}},
                  sort: ['_id']
                })
          },
          removeAll: function(){
            new PouchDB('idb://projects').destroy().then(function () {
              new PouchDB('idb://chapters').destroy().then(function (res) {
                  return res;
              }).then(function(){
                  $rootScope.$emit('alltozero');
                }).catch(function (err) {
       
              })
            }).catch(function (err) {
              // error occurred
            })
           
          },
          clearDB: function(){
            db.compact().then(function (info) {
                // compaction complete
              }).catch(function (err) {
                // handle errors
              });
              db.compact().then(function (info) {
                // compaction complete
              }).catch(function (err) {
                // handle errors
              });
          },
      }
        });
    
    function AppCtrl($scope, $log, Notification, pouchDB, pouchDBDecorators, $mdSidenav, stBlurredDialog, $mdDialog, $mdMedia, $timeout, Proyectos, $q,  $rootScope) {

    var promesa = $q.defer();
        Proyectos.findWork();
          
        var tabs = [], selected = null, previous = null;
        $scope.tabs = tabs;
        $scope.projects = Proyectos.showp();
        $scope.ArrayTextile = Proyectos.shows();
        $scope.selectedIndex = 2;
        $scope.$watch('selectedIndex', function (current, old) {
            previous = selected;
            selected = tabs[current];
        });
        
        $rootScope.$on('update.tabs', function(event, result){
            $scope.tabs.length = 0;
            for (var i = 0; i < result.length; i++) {
               var docx = {_id: result[i]._id, title: result[i].title, content: result[i].content, disabled: false, done: false, project: result[i].project};
                $scope.tabs.push(docx);
           }
           $timeout(function(){
            $(".splash").fadeOut(300, function() { $(this).remove(); });
           }, 4000);
            });
        $rootScope.$on('alltozero', function(){
            $scope.tabs.length = 0;
            $scope.projects.length = 0;
            Proyectos.findWork();
            $scope.tab = 'default';
            });
        $rootScope.$on('update.splice', function(event, result){
            console.log(result);
            $scope.tabs.splice(result, 1);
              $rootScope.$apply();
            });
        $rootScope.$on('update.settings', function(){
            Proyectos.getDataTextile().then(function(result){
          $scope.ArrayTextile = {author: result.docs[0].author, email: result.docs[0].email, path: result.docs[0].path};
          $scope.$apply();
        }).catch(function(err){
          $scope.ArrayTextile = {_id: 'TextileSettings', author: 'Usuaro', email: 'tu@email.dm', path: appt.getPath('home')};
          Proyectos.setDataTextile($scope.ArrayTextile);
        });
            });
        

        
   

        $scope.tab = 'default';
        $scope.isSet = function(tabNum){
          return $scope.tab === tabNum;
        };
        $scope.ArrayTextile = '';
        Proyectos.getDataTextile().then(function(result){
          $scope.ArrayTextile = {author: result.docs[0].author, email: result.docs[0].email, path: result.docs[0].path};
          $scope.$apply();
        }).catch(function(err){
          console.log("brother, something went lazy")
          $scope.ArrayTextile = {_id: 'TextileSettings', author: 'Usuaro', email: 'tu@email.dm', path: appt.getPath('home')};
          Proyectos.setDataTextile($scope.ArrayTextile);
        });
        $scope.addTab = function () {
            var chapter = {
            _id: guid(),
            title: 'Sin tÃ­tulo',
            content: 'Escribe aquÃ­...',
            disabled: false,
            done: false,
            project: $scope.tab
            };
          Proyectos.addChapter(chapter);
          $scope.tabs.push(chapter);
           
        };
        $scope.isSet = function(tabNum){
          return $scope.tab === tabNum;
        };

        $scope.newProject = function () {
             $mdDialog.show({
                  controller: function($scope, $mdDialog) {
                     $scope.create = function() {
                        $mdDialog.hide();
                        Proyectos.newWork($scope.titulo.project);
                     }
                     $scope.close = function() {
                        $mdDialog.hide();
                     }
                  },
                  template: '<md-dialog aria-label="NewProject" ng-cloak style="overflow:hidden;"><form><md-dialog-content><md-input-container class="md-block" style="margin: 25px 4px 0 4px;"><label>TÃ­tulo de proyecto</label><input ng-model="titulo.project" ng-required="true"> </md-input-container><md-dialog-actions layout="row" style="padding:0;"><md-button class="md-primary md-raised" ng-click="close()">Cancelar</md-button><span flex></span><md-button class="md-default md-raised" class="md-default md-raised" ng-click="create()" style="margin-right:10px;" md-autofocus ng-disabled="!(!!titulo.project)">Crear</md-button></md-dialog-actions></form></md-dialog>',
                  parent: angular.element(document.body),
                  clickOutsideToClose:true
                })
        };

        $scope.removeTab = function (tab) {
                var confirm = $mdDialog.confirm()
                  .title('Borrar artÃ­culo')
                  .textContent('Â¿EstÃ¡s segurx?')
                  .ariaLabel('Eliminar')
                 
                  .ok('Eliminar')
                  .cancel('Cancelar');
            $mdDialog.show(confirm).then(function() {
             Proyectos.delChapter(tab);
             console.log(tab);
         }, function() {
              $scope.$apply();
            });
            
            
        };
        
         $scope.Math = function (tab, expression) {
                $mdDialog.show({
                    controller: 'MathController',
                  templateUrl: 'ui/math.html',
                  parent: angular.element(document.body),
                  locals : {
                        tab : tab,
                        newexp: expression
                    },
                  clickOutsideToClose:true
                })
            };
        $scope.closeDialog = function() {
                  $mdDialog.hide();
            }

 
        $scope.loadchaps = function(data) {  
            if(data){
                 var project = data;

                } else {
                   var project = "default";
                }
                $scope.tab = project;
              Proyectos.findPad(project);
        };

        $scope.loadchaps('default');
        
        $scope.saveData = function (data) {
            Proyectos.saveWork(data);
        };

        

        $scope.PDF_Single = function () {
           

            var __id = $('#projectactual').html();
            var html = "";
            var options = { format: 'A4' };
            var titlexw = "";
            Notification('Construyendo artÃ­culo...');
            console.log(__id);
               Proyectos.get_chapter_row(__id).then(function (result) {
                  for (var i = 0; i < result.docs.length; i++) {
                    html += '<h2>'+result.docs[i].title+'</h2>';
                    titlexw += result.docs[i].title;

                    html += '<div>'+result.docs[i].content+'</div>';
                    console.log(result.docs[i].title);
                    };
                    console.log(result);
                }).then(function (res) {
                    console.log($scope.ArrayTextile.path);
                    
                  var convertFactory = require('electron-html-to');
                    var conversion = convertFactory({
                          converterPath: convertFactory.converters.PDF
                        });
                         
                        conversion({ html: html }, function(err, result) {
                          if (err) {
                            Notification('OcurriÃ³ un error desconocido');
                            return console.error(err);
                          }
                         
                          console.log(result.numberOfPages);
                           Notification('PDF guardado. Revisa tu carpeta.');
                          result.stream.pipe(fs.createWriteStream($scope.ArrayTextile.path+'/'+titlexw+'.pdf'));
                          conversion.kill(); // necessary if you use the electron-server strategy, see bellow for details 
                        });
                }).catch(function(error){ Notification('OcurriÃ³ un error desconocido'+err); });
             

        };
         $scope.EPUB_Single = function () {
            var __id = $('#projectactual').html();
            var titlexw = "";
            Notification('Construyendo artÃ­culo...');
            console.log(__id);
               Proyectos.get_chapter_row(__id).then(function (result) {
                var epubStream = epubGenerator({
                                title: result.docs[0].title,
                                author: $scope.ArrayTextile.author,
                                description: result.docs[0].title,
                                rights: 'CC-BY http://creativecommons.org/licenses/by/4.0/'
                            });
                titlexw += result.docs[0].title;
                  for (var i = 0; i < result.docs.length; i++) {
                    Notification('EPUB guardado...');
                     epubStream.add('index_'+i+'.xhtml', '<?xml version="1.0" encoding="utf-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><title>'+result.docs[i].title+'</title></head><body>'+result.docs[i].content+'</body></html>', {
                                title: result.docs[i].title,
                                toc: true
                            });

                    };
                    return result;
                }).then(function (res) {
                   epubStream.end().pipe( fs.createWriteStream($scope.ArrayTextile.path+'/'+titlexw+'.epub') );
                   Notification('EPUB guardado.');
                });
           
        };
         $scope.TXT_Single = function () {
            var __id = $('#projectactual').html();
            var html = "";
            var titlexw = "";
            Notification('Construyendo artÃ­culo...');
               Proyectos.get_chapter_row(__id).then(function (result) {
                var titlexw = result.docs[0].title;
                  for (var i = 0; i < result.docs.length; i++) {
                    html += '<h3>'+result.docs[i].title+'</h3>';
                    html += '<hr>';
                    html += result.docs[i].content;
                    html += '<hr>';
                    };
                }).then(function (res) {
                      var textto = export_txt.fromString(html, {
                                wordwrap: 130
                            });
                        fs.writeFile($scope.ArrayTextile.path+"/"+titlexw+".txt", textto, function(err) {
                                if(err) {
                                    return console.log(err);
                                }
                               Notification('Archivo guardado');
                            }); 
                      }).catch(function(err){ console.log(err); Notification('Ocurrio un error desconocido'); });
        };

         $scope.HTML_Single = function () {
            var __id = $('#projectactual').html();
            var html = "";
            var titlexw = "";
            Notification('Construyendo artÃ­culo...');
            console.log(__id);
               Proyectos.get_chapter_row(__id).then(function (result) {
                  for (var i = 0; i < result.docs.length; i++) {
                    html += '<h2>'+result.docs[i].title+'</h2>';
                    titlexw += result.docs[i].title;

                    html += '<div>'+result.docs[i].content+'</div>';
                    };
                }).then(function (res) {
                     fs.writeFile($scope.ArrayTextile.path+"/"+titlexw+".html", html,  {encoding: "utf8" ,flag: "w" }, function(err) {
                                if(err) {
                                    return console.log(err);
                                }
                               Notification('HTML guardado');
                            }); 
                }).catch(function(error){ console.log(error); Notification('OcurriÃ³ un error desconocido'); });
             

        };
        $scope.setID = function(id){
            $('#projectactual').html(id);
        }
        $scope.settingsproj = function(project){
        // Call open() with a template and some data
                 stBlurredDialog.open('ui/settings.html', project);
                     $scope.currentproject = project;
         }
         $scope.configuretextile = function(){
            stBlurredDialog.open('ui/configure.html');
         }

                    $scope.toggleSidenav = function (menu) {
                    $mdSidenav(menu).toggle();
                    };

                $scope.selected = [];
                $scope.toggle = function (item, list) {
                    var idx = list.indexOf(item);
                    if (idx > -1) {
                        list.splice(idx, 1);
                    }
                    else{
                        list.push(item);
                    }
                };
                $scope.data = {
                    user: {
                        name: 'MatÃ­as',
                        email: 'mati@unwritten.in',
                        icon: 'face'
                    }

                };

                $scope.scrollopts = {
                wheelSpeed: 2,
                wheelPropagation: true,
                minScrollbarLength: 20
                };

                 
  
    }
    function ConfigureTextile($scope, $log, Notification, $mdSidenav, stBlurredDialog, Proyectos, $mdDialog, $rootScope){
      $scope.ArrayTextile = '';
        Proyectos.getDataTextile().then(function(result){
          $scope.ArrayTextile = {author: result.docs[0].author, email: result.docs[0].email, path: result.docs[0].path};
          $scope.$apply();
        }).catch(function(err){
          console.log("brother, something went lazy")
          $scope.ArrayTextile = {_id: 'TextileSettings', author: 'Usuaro', email: 'tu@email.dm', path: appt.getPath('home')};
          Proyectos.setDataTextile($scope.ArrayTextile);
        });
      $scope.destroyeverything = function(){
        var confirm = $mdDialog.confirm()
                  .title('Borrar todo')
                  .textContent('Piensa en lo que estÃ¡s haciendo.')
                  .ariaLabel('Eliminar')
                 
                  .ok('Eliminar')
                  .cancel('Cancelar');
            $mdDialog.show(confirm).then(function() {
        Notification("Base de datos eliminada");
            Proyectos.removeAll();
       });
      }

      $scope.selectDir = function(){
        dialog.showOpenDialog({
          properties: ['openDirectory']
        }, function(data){
            $scope.ArrayTextile.path = data[0];
            Proyectos.updateSetting('path', data[0]);
            $scope.$apply();
        });
      }
      $scope.cleaningDB = function(){

        Notification("La base de datos ahora estÃ¡ limpia");
        Proyectos.clearDB();
      }
      $scope.set = function(which){
        if(which == 'author') {
        Proyectos.updateSetting(which, $scope.ArrayTextile.author);
      } if(which == 'email') {
        Proyectos.updateSetting(which, $scope.ArrayTextile.email);
      }
      }
      $scope.tab = 1;
        $scope.setTab = function(newTab){
          $scope.tab = newTab;
        };
        $scope.isSet = function(tabNum){
          return $scope.tab === tabNum;
        };
    }





    function BlurCtrl($scope, $log, Notification, $mdSidenav, stBlurredDialog, Proyectos, $mdDialog, $q) {
        $scope.tab = 1;
        $scope.ArrayTextile = '';
        Proyectos.getDataTextile().then(function(result){
          $scope.ArrayTextile = {author: result.docs[0]._author, email: result.docs[0]._author, path: result.docs[0].path};
          console.log($scope.ArrayTextile.path);
        }).catch(function(err){
          console.log("brother, something went lazy")
          $scope.ArrayTextile = {_id: 'TextileSettings', author: 'Usuaro', email: 'tu@email.dm', path: appt.getPath('home')};
          Proyectos.setDataTextile($scope.ArrayTextile);
        });
        $scope.setTab = function(newTab){
          $scope.tab = newTab;
        };
        $scope.isSet = function(tabNum){
          return $scope.tab === tabNum;
        };
        $scope.dialogData = stBlurredDialog.getDialogData();

      /*  Proyectos.getfile($scope.dialogData._id, 'tapacover.png').then(function(blob){
          console.log(blob);
          var url = URL.createObjectURL(blob);
          var img = document.createElement('img');
          img.src = url;
          $('#imgcovers').html("aqui:"+img);
          document.body.appendChild(img);
        }).catch(function(err){
          console.log("error:"+err);
        }); */

        $scope.SetIn = function (row) {
            $scope.dialog = stBlurredDialog.getDialogData();
            Proyectos.updateWork(row, $scope.dialog);
        };
        $scope.getimage = function(){
          $scope.dialog = stBlurredDialog.getDialogData();
          console.log($scope.dialog);
          $q.when(Proyectos.getfile($scope.dialogData._id, 'tapacover.png')).then(function(blob) {
                     console.log(blob);
          var url = URL.createObjectURL(blob);
          var img = document.createElement('img');
          img.src = url;
          $('#imgcovers').html("aqui:"+img);
                 });

      
        };

        $scope.trashproject = function(project){
            var confirm = $mdDialog.confirm()
                  .title('Â¿EstÃ¡s seguro de borrar Ã©ste proyecto?')
                  .textContent('Todo tu trabajo serÃ¡ borrado.')
                  .ariaLabel('Eliminar trabajo')
                 
                  .ok('Eliminar')
                  .cancel('No. Cancelar.');
            $mdDialog.show(confirm).then(function() {
            stBlurredDialog.close();
                Proyectos.delWork(project);
                Proyectos.findPad('default');
         }, function() {
              
            });
        }
        $scope.PDFProject = function () {
            var html = "";
            $scope.dialog = stBlurredDialog.getDialogData();
            Notification('Construyendo PDF...');
            console.log($scope.dialog);
               Proyectos.get_project_rows($scope.dialog._id).then(function (result) {
                html += '<body>';
                 html += '<h1>'+$scope.dialog.title+'</h1>';
                  for (var i = 0; i < result.docs.length; i++) {
                    html += '<h3>'+result.docs[i].title+'</h3>';
                    html += '<div>'+result.docs[i].content+'</div><div style="page-break-after:always;"></div>';
                    console.log(result.docs[i].title);
                    };
                    html += '</body>';
                }).then(function (res) {

   var convertFactory = require('electron-html-to');
                    var conversion = convertFactory({
                          converterPath: convertFactory.converters.PDF
                        });
                         
                        conversion({ html: html }, function(err, result) {
                          if (err) {
                            return console.error(err);
                            Notification('OcurriÃ³ un error desconocido');
                          }
                         
                          console.log(result.numberOfPages);
                           Notification('PDF guardado. Revisa tu carpeta.');
                          result.stream.pipe(fs.createWriteStream($scope.ArrayTextile.path+'/'+titlexw+'.pdf'));
                          conversion.kill(); // necessary if you use the electron-server strategy, see bellow for details 
                        });
                }).catch(function(error){ Notification('OcurriÃ³ un error desconocido'); });
               };

        $scope.Epub2Project = function () {
            $scope.dialog = stBlurredDialog.getDialogData();
             var epubStream = epubGenerator({
                                title: $scope.dialog.title,
                                author: 'Textile',
                                description: $scope.dialog.title,
                                rights: 'CC-BY http://creativecommons.org/licenses/by/4.0/'
                            });
            Notification('Construyendo EPUB...');
               Proyectos.get_project_rows($scope.dialog._id).then(function (result) {
                  for (var i = 0; i < result.docs.length; i++) {
                   epubStream.add('index_'+i+'.xhtml', '<?xml version="1.0" encoding="utf-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><title>'+result.docs[i].title+'</title></head><body>'+result.docs[i].content+'</body></html>', {
                                title: result.docs[i].title,
                                toc: true
                            })
                    };
                }).then(function (res) {
                            epubStream.end().pipe( fs.createWriteStream($scope.ArrayTextile.path+'/project.epub') );
                        epubStream.on('error', function(err){
                            console.trace(err);
                        });
                         Notification('EPUB guardado.');
                }).catch(function(error){ console.log(error); Notification('OcurriÃ³ un error desconocido'); });
               };


        $scope.Txt2Project = function () {
            $scope.dialog = stBlurredDialog.getDialogData();
           var html = "";
            Notification('Construyendo TXT...');
               Proyectos.get_project_rows($scope.dialog._id).then(function (result) {
                 html += '<hr>';
                 html += '<h1>'+$scope.dialog.title+'</h1>';
                 html += '<hr>';
                  for (var i = 0; i < result.docs.length; i++) {
                    html += '<h3>'+result.docs[i].title+'</h3>';
                    html += '<hr>';
                    html += result.docs[i].content;
                    html += '<hr>';
                    };
                 }).then(function (res) {
                        var textto = export_txt.fromString(html, {
                                wordwrap: 130
                            });
                        fs.writeFile($scope.ArrayTextile.path+"/"+$scope.dialog.title+".txt", textto, function(err) {
                                if(err) {
                                    return console.log(err);
                                }

                               Notification('Archivo guardado');
                            }); 
                }).catch(function(error){ Notification('OcurriÃ³ un error desconocido'); });
               };
               $scope.HTML2Project = function () {
            $scope.dialog = stBlurredDialog.getDialogData();
           var html = "";
            Notification('Construyendo HTML...');
               Proyectos.get_project_rows($scope.dialog._id).then(function (result) {
                 html += '<h1 text-align="center">'+$scope.dialog.title+'</h1>';
                 html += '<hr>';
                  for (var i = 0; i < result.docs.length; i++) {
                    html += '<h3>'+result.docs[i].title+'</h3>';
                    html += '<hr>';
                    html += result.docs[i].content;
                    html += '<hr>';
                    };
                 }).then(function (res) {
                        fs.writeFile($scope.ArrayTextile.path+"/"+$scope.dialog.title+".html", html,  {encoding: "utf8" ,flag: "w" }, function(err) {
                                if(err) {
                                    return console.log(err);
                                }

                               Notification('Archivo guardado');
                            }); 
                }).catch(function(error){ Notification('OcurriÃ³ un error desconocido'); });
               };
               $scope.Docx2Project = function() {
                $scope.dialog = stBlurredDialog.getDialogData();
           var html = "";
            Notification('Construyendo DOCX...');
               Proyectos.get_project_rows($scope.dialog._id).then(function (result) {
                 html += '<h1 text-align="center">'+$scope.dialog.title+'</h1>';
                 html += '<hr>';
                  for (var i = 0; i < result.docs.length; i++) {
                    html += '<h3>'+result.docs[i].title+'</h3>';
                    html += '<hr>';
                    html += result.docs[i].content;
                    html += '<hr>';
                    };
                 }).then(function (res) {
                       var docx = HtmlDocx.asBlob(html);
                          fs.writeFile($scope.ArrayTextile.path+'/'+$scope.dialog.title+'.docx', docx, function(err) {
                            if (err) throw err;
                          });
                        
                               Notification('Archivo guardado');
                          
                }).catch(function(error){ Notification('OcurriÃ³ un error desconocido'); });

                
               }
               $scope.SetPathFile = function(){
               dialog.showOpenDialog( {properties: ['openDirectory']}, {filters: [{extensions: ['jpg', 'png'] }]}
                    , function(data) {
                        console.log(data);

                    });
               },
               $scope.UpCoverImage = function(){
                $scope.dialog = stBlurredDialog.getDialogData();
               dialog.showOpenDialog({ filters: [
                       { name: 'text', extensions: ['png', 'jpg'] }
                      ]}, function(data) {
                         if (data === undefined) return;
                      var fileName = base64_encode(data[0]);
                      $('#imgcovers').html('<img id="imgcover" src="data:image/png;base64,'+fileName+'">');
                        
                        Proyectos.storeimage($scope.dialog._id, fileName);
                    });
               /* var base64str = base64_encode('kitten.jpg');
console.log(base64str);
// convert base64 string back to image 
base64_decode(base64str, 'copy.jpg'); */
               }
               $scope.Epub32Project = function() {
                $scope.dialog = stBlurredDialog.getDialogData();
           var html = [];
            Notification('Construyendo EPUB3...');
               Proyectos.get_project_rows($scope.dialog._id).then(function (result) {
                  for (var i = 0; i < result.docs.length; i++) {
                    html.push({title: result.docs[i].title, data: result.docs[i].content, id: i});
                    };
                 }).then(function (res) {
                      var data = {
                         lang: 'spanish',
                         title: $scope.dialog.title,
                         author: 'Textile',
                         publisher: 'Textile',
                         description: $scope.dialog.descripcion,
                         contents: html,
                         identifiers: {
                          isbn10: '-',
                          isbn13: '-',
                          doi: '-'
                         },
                         dates: {
                          published: new Date().toISOString().split('.')[0]+ 'Z',
                          modified: new Date().toISOString().split('.')[0]+ 'Z'
                         },
                         appendChapterTitles: true,
                         output: $scope.dialog.title+'.epub'
                        };
                        epub.createFile(data).then(function(){
                          Notification('Archivo guardado.');
                        }).catch(function(error){
                            Notification('OcurriÃ³ un error desconocido');
                         console.error(error);
                        });
                }).catch(function(error){ console.log(error); Notification('OcurriÃ³ un error desconocido'); });

                
               }
                $scope.scrollopts = {
                wheelSpeed: 2,
                wheelPropagation: true,
                minScrollbarLength: 20
                };
    }
    
    

    function MathController($scope, Proyectos, $mdDialog, newexp, tab, $rootScope) {
        $scope.newexp = newexp;
        $scope.tab = tab;
        $scope.math = [];
        $scope.math.expression = "k_{n+1} = n^2 + k_n^2 - k_{n-1}";
        $scope.closeDialog = function() {
          $mdDialog.hide();
        }
        $scope.generarmath = function() {
          img.onload = function() {
           var nodes = document.getElementsByClassName("MathJax_SVG");
          var svg = nodes[0].getElementsByTagName("svg")[0];
            var w = svg.getAttribute("width"), h = svg.getAttribute("height");
          var css = svg.style.cssText+" width:"+w+"; height:"+h;
                    svg.style.cssText = ""; // this will be handled by the <img> tag instead
                    svg.setAttribute("xmlns","http://www.w3.org/2000/svg");
                    svg = [
                      '<?xml version="1.0" standalone="no"?>',
                      '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">',
                      svg.outerHTML
                    ].join("\n"); 

              var canvas = document.createElement( "canvas" );
              var ctx = canvas.getContext( "2d" );
               
              var imgq = document.createElement( "img" );
              imgq.setAttribute( "src", "data:image/svg+xml;base64," + btoa(svg) );
               
              
                  ctx.drawImage( imgq, 0, 0 );
                  
                       var __id = $('#projectactual').html();
                       $("#"+__id).append(canvas.toDataURL( "image/png" ));
                                       $rootScope.$broadcast('appendmath', tab);
              };
               $scope.closeDialog();
    };
        };
    

 function LaTeXTransform(mimetype, value) {
   let latex = '$$' + value + '$$';

    var container = document.createElement('div');
    container.innerHTML = latex
    MathJaxx.loadAndTypeset(document, container,
      function() {
        container.getElementsByClassName('MathJax_SVG_Display');
        container.getElementsByClassName('MathJax_SVG');
        container.getElementsByTagName('script')[0].textContent;
      });

    return container;
}
    app.directive("mathjaxBind", function() {
    return {
        restrict: "A",
        controller: ["$scope", "$element", "$attrs", function($scope, $element, $attrs) {
            $scope.$watch($attrs.mathjaxBind, function(value) {
                $element.html("");
                $element.append(LaTeXTransform('text/latex', value));
                
            });
        }]
    };
});


}());

