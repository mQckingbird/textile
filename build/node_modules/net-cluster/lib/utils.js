(function() {
  var cluster, dns;

  cluster = require("cluster");

  dns = require("dns");

  exports.toNumber = function(x) {
    x = Number(x);
    if (x >= 0) {
      return x;
    }
    return false;
  };

  exports.isPipeName = function(s) {
    return typeof s === 'string' && exports.toNumber(s) === false;
  };

  exports.errnoException = function(errorno, syscall) {
    var e;

    e = new Error(syscall + ' ' + errorno);
    e.errno = e.code = errorno;
    e.syscall = syscall;
    return e;
  };

  exports.getPortArguments = function(args, cb) {
    var backlog, port;

    port = exports.toNumber(args[0]);
    backlog = exports.toNumber(args[1] || exports.toNumber(args[2]));
    if (args.length === 0 || typeof args[0] === "function") {
      return cb(null, ["0.0.0.0", 0, null, backlog]);
    } else if (typeof args[1] === "undefined" || typeof args[1] === "function" || typeof args[1] === "number") {
      return cb(null, ["0.0.0.0", port, 4, backlog]);
    } else {
      return dns.lookup(args[1], function(err, ip, addressType) {
        if (err) {
          return cb(err);
        }
        if (!ip) {
          ip = "0.0.0.0";
          addressType = 4;
        }
        return cb(null, [ip, port, addressType, backlog]);
      });
    }
  };

  exports.shouldDoIntercept = function(args) {
    var port;

    if (!cluster.isWorker) {
      return false;
    }
    port = exports.toNumber(args[0]);
    if (args.length === 0 || typeof args[0] === "function") {
      return true;
    } else if (args[0] && typeof args[0] === "object") {
      return false;
    } else if (exports.isPipeName(args[0])) {
      return false;
    } else if (typeof args[1] === "undefined" || typeof args[1] === "function" || typeof args[1] === "number") {
      return port === 0;
    } else {
      return port === 0;
    }
  };

}).call(this);
